# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _sequenceParser.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sequenceParser', [dirname(__file__)])
        except ImportError:
            import _sequenceParser
            return _sequenceParser
        if fp is not None:
            try:
                _mod = imp.load_module('_sequenceParser', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sequenceParser = swig_import_helper()
    del swig_import_helper
else:
    import _sequenceParser
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sequenceParser.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_sequenceParser.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_sequenceParser.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_sequenceParser.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_sequenceParser.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_sequenceParser.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_sequenceParser.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_sequenceParser.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_sequenceParser.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_sequenceParser.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_sequenceParser.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_sequenceParser.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_sequenceParser.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_sequenceParser.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_sequenceParser.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_sequenceParser.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_sequenceParser.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _sequenceParser.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args):
        _sequenceParser.StringVector_swiginit(self,_sequenceParser.new_StringVector(*args))
    __swig_destroy__ = _sequenceParser.delete_StringVector
StringVector.iterator = new_instancemethod(_sequenceParser.StringVector_iterator,None,StringVector)
StringVector.__nonzero__ = new_instancemethod(_sequenceParser.StringVector___nonzero__,None,StringVector)
StringVector.__bool__ = new_instancemethod(_sequenceParser.StringVector___bool__,None,StringVector)
StringVector.__len__ = new_instancemethod(_sequenceParser.StringVector___len__,None,StringVector)
StringVector.pop = new_instancemethod(_sequenceParser.StringVector_pop,None,StringVector)
StringVector.__getslice__ = new_instancemethod(_sequenceParser.StringVector___getslice__,None,StringVector)
StringVector.__setslice__ = new_instancemethod(_sequenceParser.StringVector___setslice__,None,StringVector)
StringVector.__delslice__ = new_instancemethod(_sequenceParser.StringVector___delslice__,None,StringVector)
StringVector.__delitem__ = new_instancemethod(_sequenceParser.StringVector___delitem__,None,StringVector)
StringVector.__getitem__ = new_instancemethod(_sequenceParser.StringVector___getitem__,None,StringVector)
StringVector.__setitem__ = new_instancemethod(_sequenceParser.StringVector___setitem__,None,StringVector)
StringVector.append = new_instancemethod(_sequenceParser.StringVector_append,None,StringVector)
StringVector.empty = new_instancemethod(_sequenceParser.StringVector_empty,None,StringVector)
StringVector.size = new_instancemethod(_sequenceParser.StringVector_size,None,StringVector)
StringVector.clear = new_instancemethod(_sequenceParser.StringVector_clear,None,StringVector)
StringVector.swap = new_instancemethod(_sequenceParser.StringVector_swap,None,StringVector)
StringVector.get_allocator = new_instancemethod(_sequenceParser.StringVector_get_allocator,None,StringVector)
StringVector.begin = new_instancemethod(_sequenceParser.StringVector_begin,None,StringVector)
StringVector.end = new_instancemethod(_sequenceParser.StringVector_end,None,StringVector)
StringVector.rbegin = new_instancemethod(_sequenceParser.StringVector_rbegin,None,StringVector)
StringVector.rend = new_instancemethod(_sequenceParser.StringVector_rend,None,StringVector)
StringVector.pop_back = new_instancemethod(_sequenceParser.StringVector_pop_back,None,StringVector)
StringVector.erase = new_instancemethod(_sequenceParser.StringVector_erase,None,StringVector)
StringVector.push_back = new_instancemethod(_sequenceParser.StringVector_push_back,None,StringVector)
StringVector.front = new_instancemethod(_sequenceParser.StringVector_front,None,StringVector)
StringVector.back = new_instancemethod(_sequenceParser.StringVector_back,None,StringVector)
StringVector.assign = new_instancemethod(_sequenceParser.StringVector_assign,None,StringVector)
StringVector.resize = new_instancemethod(_sequenceParser.StringVector_resize,None,StringVector)
StringVector.insert = new_instancemethod(_sequenceParser.StringVector_insert,None,StringVector)
StringVector.reserve = new_instancemethod(_sequenceParser.StringVector_reserve,None,StringVector)
StringVector.capacity = new_instancemethod(_sequenceParser.StringVector_capacity,None,StringVector)
StringVector_swigregister = _sequenceParser.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args):
        _sequenceParser.StringList_swiginit(self,_sequenceParser.new_StringList(*args))
    __swig_destroy__ = _sequenceParser.delete_StringList
StringList.iterator = new_instancemethod(_sequenceParser.StringList_iterator,None,StringList)
StringList.__nonzero__ = new_instancemethod(_sequenceParser.StringList___nonzero__,None,StringList)
StringList.__bool__ = new_instancemethod(_sequenceParser.StringList___bool__,None,StringList)
StringList.__len__ = new_instancemethod(_sequenceParser.StringList___len__,None,StringList)
StringList.pop = new_instancemethod(_sequenceParser.StringList_pop,None,StringList)
StringList.__getslice__ = new_instancemethod(_sequenceParser.StringList___getslice__,None,StringList)
StringList.__setslice__ = new_instancemethod(_sequenceParser.StringList___setslice__,None,StringList)
StringList.__delslice__ = new_instancemethod(_sequenceParser.StringList___delslice__,None,StringList)
StringList.__delitem__ = new_instancemethod(_sequenceParser.StringList___delitem__,None,StringList)
StringList.__getitem__ = new_instancemethod(_sequenceParser.StringList___getitem__,None,StringList)
StringList.__setitem__ = new_instancemethod(_sequenceParser.StringList___setitem__,None,StringList)
StringList.append = new_instancemethod(_sequenceParser.StringList_append,None,StringList)
StringList.empty = new_instancemethod(_sequenceParser.StringList_empty,None,StringList)
StringList.size = new_instancemethod(_sequenceParser.StringList_size,None,StringList)
StringList.clear = new_instancemethod(_sequenceParser.StringList_clear,None,StringList)
StringList.swap = new_instancemethod(_sequenceParser.StringList_swap,None,StringList)
StringList.get_allocator = new_instancemethod(_sequenceParser.StringList_get_allocator,None,StringList)
StringList.begin = new_instancemethod(_sequenceParser.StringList_begin,None,StringList)
StringList.end = new_instancemethod(_sequenceParser.StringList_end,None,StringList)
StringList.rbegin = new_instancemethod(_sequenceParser.StringList_rbegin,None,StringList)
StringList.rend = new_instancemethod(_sequenceParser.StringList_rend,None,StringList)
StringList.pop_back = new_instancemethod(_sequenceParser.StringList_pop_back,None,StringList)
StringList.erase = new_instancemethod(_sequenceParser.StringList_erase,None,StringList)
StringList.push_back = new_instancemethod(_sequenceParser.StringList_push_back,None,StringList)
StringList.front = new_instancemethod(_sequenceParser.StringList_front,None,StringList)
StringList.back = new_instancemethod(_sequenceParser.StringList_back,None,StringList)
StringList.assign = new_instancemethod(_sequenceParser.StringList_assign,None,StringList)
StringList.resize = new_instancemethod(_sequenceParser.StringList_resize,None,StringList)
StringList.insert = new_instancemethod(_sequenceParser.StringList_insert,None,StringList)
StringList.pop_front = new_instancemethod(_sequenceParser.StringList_pop_front,None,StringList)
StringList.push_front = new_instancemethod(_sequenceParser.StringList_push_front,None,StringList)
StringList.reverse = new_instancemethod(_sequenceParser.StringList_reverse,None,StringList)
StringList_swigregister = _sequenceParser.StringList_swigregister
StringList_swigregister(StringList)

PROPERTIES_WIDTH = _sequenceParser.PROPERTIES_WIDTH
NAME_WIDTH = _sequenceParser.NAME_WIDTH
NAME_WIDTH_WITH_DIR = _sequenceParser.NAME_WIDTH_WITH_DIR
eTypeUndefined = _sequenceParser.eTypeUndefined
eTypeFolder = _sequenceParser.eTypeFolder
eTypeFile = _sequenceParser.eTypeFile
eTypeSequence = _sequenceParser.eTypeSequence
eTypeAll = _sequenceParser.eTypeAll
eDetectionNone = _sequenceParser.eDetectionNone
eDetectionNegative = _sequenceParser.eDetectionNegative
eDetectionSequenceNeedAtLeastTwoFiles = _sequenceParser.eDetectionSequenceNeedAtLeastTwoFiles
eDetectionSingleFileSeqUseFirstNumber = _sequenceParser.eDetectionSingleFileSeqUseFirstNumber
eDetectionIgnoreDotFile = _sequenceParser.eDetectionIgnoreDotFile
eDetectionSequenceFromFilename = _sequenceParser.eDetectionSequenceFromFilename
eDetectionDefault = _sequenceParser.eDetectionDefault
eDisplayNone = _sequenceParser.eDisplayNone
eDisplayProperties = _sequenceParser.eDisplayProperties
eDisplayPath = _sequenceParser.eDisplayPath
eDisplayAbsolutePath = _sequenceParser.eDisplayAbsolutePath
eDisplayColor = _sequenceParser.eDisplayColor
eDisplayDefault = _sequenceParser.eDisplayDefault

def __invert__(*args) -> "sequenceParser::EDisplay" :
  return _sequenceParser.__invert__(*args)
__invert__ = _sequenceParser.__invert__

def __iand__(*args) -> "sequenceParser::EDisplay" :
  return _sequenceParser.__iand__(*args)
__iand__ = _sequenceParser.__iand__

def __and__(*args) -> "sequenceParser::EDisplay" :
  return _sequenceParser.__and__(*args)
__and__ = _sequenceParser.__and__

def __ior__(*args) -> "sequenceParser::EDisplay" :
  return _sequenceParser.__ior__(*args)
__ior__ = _sequenceParser.__ior__

def __or__(*args) -> "sequenceParser::EDisplay" :
  return _sequenceParser.__or__(*args)
__or__ = _sequenceParser.__or__
class FileObject(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sequenceParser.delete_FileObject
FileObject.getCout = new_instancemethod(_sequenceParser.FileObject_getCout,None,FileObject)
FileObject.getFiles = new_instancemethod(_sequenceParser.FileObject_getFiles,None,FileObject)
FileObject.getDirectory = new_instancemethod(_sequenceParser.FileObject_getDirectory,None,FileObject)
FileObject.getAbsoluteDirectory = new_instancemethod(_sequenceParser.FileObject_getAbsoluteDirectory,None,FileObject)
FileObject.setDirectory = new_instancemethod(_sequenceParser.FileObject_setDirectory,None,FileObject)
FileObject.setDirectoryFromPath = new_instancemethod(_sequenceParser.FileObject_setDirectoryFromPath,None,FileObject)
FileObject.getDisplayOptions = new_instancemethod(_sequenceParser.FileObject_getDisplayOptions,None,FileObject)
FileObject.getType = new_instancemethod(_sequenceParser.FileObject_getType,None,FileObject)
FileObject.clear = new_instancemethod(_sequenceParser.FileObject_clear,None,FileObject)
FileObject.clone = new_instancemethod(_sequenceParser.FileObject_clone,None,FileObject)
FileObject_swigregister = _sequenceParser.FileObject_swigregister
FileObject_swigregister(FileObject)

class File(FileObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        _sequenceParser.File_swiginit(self,_sequenceParser.new_File(*args))
    __swig_destroy__ = _sequenceParser.delete_File
File.getAbsoluteFilename = new_instancemethod(_sequenceParser.File_getAbsoluteFilename,None,File)
File.getFilename = new_instancemethod(_sequenceParser.File_getFilename,None,File)
File.clone = new_instancemethod(_sequenceParser.File_clone,None,File)
File_swigregister = _sequenceParser.File_swigregister
File_swigregister(File)

class Folder(FileObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        _sequenceParser.Folder_swiginit(self,_sequenceParser.new_Folder(*args))
    __swig_destroy__ = _sequenceParser.delete_Folder
Folder.clone = new_instancemethod(_sequenceParser.Folder_clone,None,Folder)
Folder_swigregister = _sequenceParser.Folder_swigregister
Folder_swigregister(Folder)

class Sequence(FileObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ePatternNone = _sequenceParser.Sequence_ePatternNone
    ePatternStandard = _sequenceParser.Sequence_ePatternStandard
    ePatternCStyle = _sequenceParser.Sequence_ePatternCStyle
    ePatternFrame = _sequenceParser.Sequence_ePatternFrame
    ePatternFrameNeg = _sequenceParser.Sequence_ePatternFrameNeg
    ePatternDefault = _sequenceParser.Sequence_ePatternDefault
    ePatternAll = _sequenceParser.Sequence_ePatternAll
    def __init__(self, *args):
        _sequenceParser.Sequence_swiginit(self,_sequenceParser.new_Sequence(*args))
    __swig_destroy__ = _sequenceParser.delete_Sequence
    _prefix = _swig_property(_sequenceParser.Sequence__prefix_get, _sequenceParser.Sequence__prefix_set)
    _suffix = _swig_property(_sequenceParser.Sequence__suffix_get, _sequenceParser.Sequence__suffix_set)
    _strictPadding = _swig_property(_sequenceParser.Sequence__strictPadding_get, _sequenceParser.Sequence__strictPadding_set)
    _padding = _swig_property(_sequenceParser.Sequence__padding_get, _sequenceParser.Sequence__padding_set)
    _step = _swig_property(_sequenceParser.Sequence__step_get, _sequenceParser.Sequence__step_set)
    _firstTime = _swig_property(_sequenceParser.Sequence__firstTime_get, _sequenceParser.Sequence__firstTime_set)
    _lastTime = _swig_property(_sequenceParser.Sequence__lastTime_get, _sequenceParser.Sequence__lastTime_set)
    _nbFiles = _swig_property(_sequenceParser.Sequence__nbFiles_get, _sequenceParser.Sequence__nbFiles_set)
    _fillCar = _sequenceParser.Sequence__fillCar
Sequence.clone = new_instancemethod(_sequenceParser.Sequence_clone,None,Sequence)
Sequence.initFromPattern = new_instancemethod(_sequenceParser.Sequence_initFromPattern,None,Sequence)
Sequence.initFromDetection = new_instancemethod(_sequenceParser.Sequence_initFromDetection,None,Sequence)
Sequence.extractStep = new_instancemethod(_sequenceParser.Sequence_extractStep,None,Sequence)
Sequence.getPaddingFromStringNumber = new_instancemethod(_sequenceParser.Sequence_getPaddingFromStringNumber,None,Sequence)
Sequence.extractPadding = new_instancemethod(_sequenceParser.Sequence_extractPadding,None,Sequence)
Sequence.extractIsStrictPadding = new_instancemethod(_sequenceParser.Sequence_extractIsStrictPadding,None,Sequence)
Sequence.getAbsoluteFilenameAt = new_instancemethod(_sequenceParser.Sequence_getAbsoluteFilenameAt,None,Sequence)
Sequence.getFilenameAt = new_instancemethod(_sequenceParser.Sequence_getFilenameAt,None,Sequence)
Sequence.getFirstFilename = new_instancemethod(_sequenceParser.Sequence_getFirstFilename,None,Sequence)
Sequence.getAbsoluteFirstFilename = new_instancemethod(_sequenceParser.Sequence_getAbsoluteFirstFilename,None,Sequence)
Sequence.getAbsoluteLastFilename = new_instancemethod(_sequenceParser.Sequence_getAbsoluteLastFilename,None,Sequence)
Sequence.getPatternCharacter = new_instancemethod(_sequenceParser.Sequence_getPatternCharacter,None,Sequence)
Sequence.getStandardPattern = new_instancemethod(_sequenceParser.Sequence_getStandardPattern,None,Sequence)
Sequence.getAbsoluteStandardPattern = new_instancemethod(_sequenceParser.Sequence_getAbsoluteStandardPattern,None,Sequence)
Sequence.getCStylePattern = new_instancemethod(_sequenceParser.Sequence_getCStylePattern,None,Sequence)
Sequence.getAbsoluteCStylePattern = new_instancemethod(_sequenceParser.Sequence_getAbsoluteCStylePattern,None,Sequence)
Sequence.getRange = new_instancemethod(_sequenceParser.Sequence_getRange,None,Sequence)
Sequence.getStep = new_instancemethod(_sequenceParser.Sequence_getStep,None,Sequence)
Sequence.getFirstTime = new_instancemethod(_sequenceParser.Sequence_getFirstTime,None,Sequence)
Sequence.getLastTime = new_instancemethod(_sequenceParser.Sequence_getLastTime,None,Sequence)
Sequence.getDuration = new_instancemethod(_sequenceParser.Sequence_getDuration,None,Sequence)
Sequence.getNbFiles = new_instancemethod(_sequenceParser.Sequence_getNbFiles,None,Sequence)
Sequence.getPadding = new_instancemethod(_sequenceParser.Sequence_getPadding,None,Sequence)
Sequence.isStrictPadding = new_instancemethod(_sequenceParser.Sequence_isStrictPadding,None,Sequence)
Sequence.hasMissingFile = new_instancemethod(_sequenceParser.Sequence_hasMissingFile,None,Sequence)
Sequence.getNbMissingFiles = new_instancemethod(_sequenceParser.Sequence_getNbMissingFiles,None,Sequence)
Sequence.getIdentification = new_instancemethod(_sequenceParser.Sequence_getIdentification,None,Sequence)
Sequence.getPrefix = new_instancemethod(_sequenceParser.Sequence_getPrefix,None,Sequence)
Sequence.getSuffix = new_instancemethod(_sequenceParser.Sequence_getSuffix,None,Sequence)
Sequence.isIn = new_instancemethod(_sequenceParser.Sequence_isIn,None,Sequence)
Sequence.checkPattern = new_instancemethod(_sequenceParser.Sequence_checkPattern,None,Sequence)
Sequence.__lt__ = new_instancemethod(_sequenceParser.Sequence___lt__,None,Sequence)
Sequence.__eq__ = new_instancemethod(_sequenceParser.Sequence___eq__,None,Sequence)
Sequence.__ne__ = new_instancemethod(_sequenceParser.Sequence___ne__,None,Sequence)
Sequence_swigregister = _sequenceParser.Sequence_swigregister
Sequence_swigregister(Sequence)


def fileInDirectory(*args) -> "boost::ptr_vector< sequenceParser::File >" :
  return _sequenceParser.fileInDirectory(*args)
fileInDirectory = _sequenceParser.fileInDirectory

def sequenceInDirectory(*args) -> "boost::ptr_vector< sequenceParser::Sequence >" :
  return _sequenceParser.sequenceInDirectory(*args)
sequenceInDirectory = _sequenceParser.sequenceInDirectory

def sequenceFromFilenameList(*args) -> "boost::ptr_vector< sequenceParser::Sequence >" :
  return _sequenceParser.sequenceFromFilenameList(*args)
sequenceFromFilenameList = _sequenceParser.sequenceFromFilenameList

def fileAndSequenceInDirectory(*args) -> "boost::ptr_vector< sequenceParser::FileObject >" :
  return _sequenceParser.fileAndSequenceInDirectory(*args)
fileAndSequenceInDirectory = _sequenceParser.fileAndSequenceInDirectory

def folderInDirectory(*args) -> "boost::ptr_vector< sequenceParser::Folder >" :
  return _sequenceParser.folderInDirectory(*args)
folderInDirectory = _sequenceParser.folderInDirectory

def fileObjectInDirectory(*args) -> "boost::ptr_vector< sequenceParser::FileObject >" :
  return _sequenceParser.fileObjectInDirectory(*args)
fileObjectInDirectory = _sequenceParser.fileObjectInDirectory
class ItemVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args):
        _sequenceParser.ItemVector_swiginit(self,_sequenceParser.new_ItemVector(*args))
    __swig_destroy__ = _sequenceParser.delete_ItemVector
ItemVector.iterator = new_instancemethod(_sequenceParser.ItemVector_iterator,None,ItemVector)
ItemVector.__nonzero__ = new_instancemethod(_sequenceParser.ItemVector___nonzero__,None,ItemVector)
ItemVector.__bool__ = new_instancemethod(_sequenceParser.ItemVector___bool__,None,ItemVector)
ItemVector.__len__ = new_instancemethod(_sequenceParser.ItemVector___len__,None,ItemVector)
ItemVector.pop = new_instancemethod(_sequenceParser.ItemVector_pop,None,ItemVector)
ItemVector.__getslice__ = new_instancemethod(_sequenceParser.ItemVector___getslice__,None,ItemVector)
ItemVector.__setslice__ = new_instancemethod(_sequenceParser.ItemVector___setslice__,None,ItemVector)
ItemVector.__delslice__ = new_instancemethod(_sequenceParser.ItemVector___delslice__,None,ItemVector)
ItemVector.__delitem__ = new_instancemethod(_sequenceParser.ItemVector___delitem__,None,ItemVector)
ItemVector.__getitem__ = new_instancemethod(_sequenceParser.ItemVector___getitem__,None,ItemVector)
ItemVector.__setitem__ = new_instancemethod(_sequenceParser.ItemVector___setitem__,None,ItemVector)
ItemVector.append = new_instancemethod(_sequenceParser.ItemVector_append,None,ItemVector)
ItemVector.empty = new_instancemethod(_sequenceParser.ItemVector_empty,None,ItemVector)
ItemVector.size = new_instancemethod(_sequenceParser.ItemVector_size,None,ItemVector)
ItemVector.clear = new_instancemethod(_sequenceParser.ItemVector_clear,None,ItemVector)
ItemVector.swap = new_instancemethod(_sequenceParser.ItemVector_swap,None,ItemVector)
ItemVector.get_allocator = new_instancemethod(_sequenceParser.ItemVector_get_allocator,None,ItemVector)
ItemVector.begin = new_instancemethod(_sequenceParser.ItemVector_begin,None,ItemVector)
ItemVector.end = new_instancemethod(_sequenceParser.ItemVector_end,None,ItemVector)
ItemVector.rbegin = new_instancemethod(_sequenceParser.ItemVector_rbegin,None,ItemVector)
ItemVector.rend = new_instancemethod(_sequenceParser.ItemVector_rend,None,ItemVector)
ItemVector.pop_back = new_instancemethod(_sequenceParser.ItemVector_pop_back,None,ItemVector)
ItemVector.erase = new_instancemethod(_sequenceParser.ItemVector_erase,None,ItemVector)
ItemVector.push_back = new_instancemethod(_sequenceParser.ItemVector_push_back,None,ItemVector)
ItemVector.front = new_instancemethod(_sequenceParser.ItemVector_front,None,ItemVector)
ItemVector.back = new_instancemethod(_sequenceParser.ItemVector_back,None,ItemVector)
ItemVector.assign = new_instancemethod(_sequenceParser.ItemVector_assign,None,ItemVector)
ItemVector.resize = new_instancemethod(_sequenceParser.ItemVector_resize,None,ItemVector)
ItemVector.insert = new_instancemethod(_sequenceParser.ItemVector_insert,None,ItemVector)
ItemVector.reserve = new_instancemethod(_sequenceParser.ItemVector_reserve,None,ItemVector)
ItemVector.capacity = new_instancemethod(_sequenceParser.ItemVector_capacity,None,ItemVector)
ItemVector_swigregister = _sequenceParser.ItemVector_swigregister
ItemVector_swigregister(ItemVector)

class Item(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        _sequenceParser.Item_swiginit(self,_sequenceParser.new_Item(*args))
    _type = _swig_property(_sequenceParser.Item__type_get, _sequenceParser.Item__type_set)
    _folder = _swig_property(_sequenceParser.Item__folder_get, _sequenceParser.Item__folder_set)
    _filename = _swig_property(_sequenceParser.Item__filename_get, _sequenceParser.Item__filename_set)
    _sequence = _swig_property(_sequenceParser.Item__sequence_get, _sequenceParser.Item__sequence_set)
    __swig_destroy__ = _sequenceParser.delete_Item
Item_swigregister = _sequenceParser.Item_swigregister
Item_swigregister(Item)


def browse(*args) -> "std::vector< sequenceParser::Item,std::allocator< sequenceParser::Item > >" :
  return _sequenceParser.browse(*args)
browse = _sequenceParser.browse


